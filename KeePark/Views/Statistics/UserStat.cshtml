@{
    ViewData["Title"] = "User Statistics";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="default-font">
    <p> <h3>Most Active users</h3> </p>
    <script src="https://d3js.org/d3.v5.js"></script>
    <div id="pieGraph"></div>



    <script>

            // margin
var margin = { top: 20, right: 20, bottom: 20, left: 20 },
    width = 500 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;
//pie chart
(function pieChart() {
    // set the dimensions and margins of the graph
    var width = 500
    height = 500
    margin = 20
    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
    var radius = width / 2.1;
    // appending svg object to the div #pieGraph
    //defining svg- we want to group similar elements together, and then translate this svg to center point
    var svg = d3.select("#pieGraph")
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
           // get data
    var data = {
                                    @foreach(var item in ViewBag.Map)
    {
        @Html.Raw(item.Key + ": " + item.Value + ",");
    }
}

                // set color scale
                var color = d3.scaleOrdinal()
    .domain(data)
    .range(["#FF7F50", "#FF6347", "#FFD700", "#FFA500", "#FF8C00"]);
// Compute the position of each group on the pie
var pie = d3.pie()
    .value(function (d) { return d.value; })
var mydata = pie(d3.entries(data))
//arc generator-Circular or annular sectors, as in a pie or donut chart
var arc = d3.arc()
    .innerRadius(0)
    .outerRadius(radius)
// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
//svg selects all the elements with the class arc, it creates g elemnts (slices)
svg
    .selectAll('.arc')
    .data(mydata)
    .enter()
    .append('path')
    .attr('d', arc)
    .attr('fill', function (d) { return (color(d.data.key)) })
    .attr("stroke", "black")
    .style("stroke-width", "2px")
    .style("opacity", 0.7)
// Now add the annotation. Use the centroid method to get the best coordinates
svg
    .selectAll('.arc')
    .data(mydata)
    .enter()
    .append('text')
    .text(function (d) { return d.data.key })
    .attr("transform", function (d) { return "translate(" + arc.centroid(d) + ")"; })
    .style("text-anchor", "middle")
    .style("font-size", 12)
            }());
    </script>


</div>